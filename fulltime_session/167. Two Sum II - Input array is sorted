'''
167. Two Sum II - Input array is sorted

Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.

Note:

Your returned answers (both index1 and index2) are not zero-based.
You may assume that each input would have exactly one solution and you may not use the same element twice.
Example:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.

Answer: Binary search/ two-pointer approach

'''

class Solution:
    def twoSum(self, numbers, target):
        # we can do two pointers approach here:
        i = 0
        j = len(numbers)-1
        while (i < j):
            if numbers[i] + numbers[j] == target:
                return [i+1, j+1]
            elif numbers[i] + numbers[j] > target:
                j -= 1
            else:
                i += 1
        return [-1, -1]

        ''' My solution - binary search
        def bin_search(numbers, key, i_):
            hi = len(numbers) - 1
            lo = 0
            while lo <= hi:
                mid = (lo + hi) // 2 # beware of overflow errors
                if numbers[mid] > key:
                    hi = mid - 1
                elif numbers[mid] < key:
                    lo = mid + 1
                else:
                    if mid != i_:
                        return mid
                    else:
                        return mid+1
            return -1

        for ind, i in enumerate(numbers):
            key = target - i
            x = bin_search(numbers, key, ind)
            if x != -1:
                return [ind+1, x+1]
        '''

        """
        :type numbers: List[int]
        :type target: int
        :rtype: List[int]
        """
        
