'''
70. Climbing Stairs

You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.

Example 1:

Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

Answer: Dynamic Programming, Binet's method to derive Fibonacci formula and directly apply that: O(logN)
Don't do recursive solution, as it will exceed memory.

'''

class Solution:
    def climbStairs(self, n):
        ls = [0]*(n+1)
        ls[0], ls[1] = 1, 1
        for i in range(2,n+1):
            ls[i] = ls[i-1] + ls[i-2]
        return ls.pop()


        """
        :type n: int
        :rtype: int
        """
