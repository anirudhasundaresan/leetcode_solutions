'''
922. Sort Array By Parity II

Given an array A of non-negative integers, half of the integers in A are odd, and half of the integers are even.

Sort the array so that whenever A[i] is odd, i is odd; and whenever A[i] is even, i is even.

You may return any answer array that satisfies this condition.

Example 1:

Input: [4,2,5,7]
Output: [4,5,2,7]
Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.

Note:

2 <= A.length <= 20000
A.length % 2 == 0
0 <= A[i] <= 1000

Answer: It was under 'Sorting', but I used general one-pass and O(N) storage
'''

class Solution:
    def sortArrayByParityII(self, A):
        i, j, nls = 0, 1, [0]*len(A)
        for a in A:
            if a%2==0:
                nls[i] = a
                i += 2
            else:
                nls[j] = a
                j += 2
        return nls


        """
        :type A: List[int]
        :rtype: List[int]
        """

'''
Better solution: since it has O(1) space and one pass O(N) time complexity

class Solution:
    def sortArrayByParityII(self, A):
        # place all even numbers in the first half and then odd numbers in the second half
        i = 0
        for j in range(len(A)):
            if A[j]%2==0:
                A[i], A[j] = A[j], A[i]
                i += 1
        print(A)
        i = 1
        if (len(A)//2)%2==0:
            j = (len(A)//2)
        else:
            j = len(A)//2 + 1
        while j<len(A):
            A[i], A[j] = A[j], A[i]
            i += 2
            j += 2
        return A


        """
        :type A: List[int]
        :rtype: List[int]
        """

'''
