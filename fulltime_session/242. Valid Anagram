'''
242. Valid Anagram

Given two strings s and t , write a function to determine if t is an anagram of s.

Example 1:

Input: s = "anagram", t = "nagaram"
Output: true
Example 2:

Input: s = "rat", t = "car"
Output: false
Note:
You may assume the string contains only lowercase alphabets.

Follow up:
What if the inputs contain unicode characters? How would you adapt your solution to such case?

Answer: Sorting
'''

# 'sorted' can directly take in a string (or an iterable, in general), but you cannot do string.sort() - that's only for a list

class Solution:
    def isAnagram(self, s, t):
        return (''.join(sorted(s)) == ''.join(sorted(t)))

        """
        :type s: str
        :type t: str
        :rtype: bool
        """

'''
# or we could do:

from collections import Counter
return Counter(s)==Counter(t)

# or we could do:
def isAnagram(self, s, t):
        return all([s.count(c)==t.count(c) for c in string.ascii_lowercase])
'''
