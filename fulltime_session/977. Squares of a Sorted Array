'''
977. Squares of a Sorted Array

Given an array of integers A sorted in non-decreasing order, return an array of the squares of each number, also in sorted non-decreasing order.

Example 1:

Input: [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Example 2:

Input: [-7,-3,2,3,11]
Output: [4,9,9,49,121]


Note:

1 <= A.length <= 10000
-10000 <= A[i] <= 10000
A is sorted in non-decreasing order.

Answer: Sorting
'''
class Solution:
    def sortedSquares(self, A):
        A.sort(key=abs) # O(nlogn), which is bad
        # since the list is already sorted in a non-decreasing manner, using sort again, defeats the purpose of the question
        return [x**2 for x in A] # or
        # return(sorted([x**2 for x in A]))

        """
        :type A: List[int]
        :rtype: List[int]
        """
'''
Alternate Solutions: O(n) time and space, better than O(nlogn) just time

(without using deque)
def sortedSquares(self, A):
	answer = [0] * len(A)
	l, r = 0, len(A) - 1
	while l <= r:
		left, right = abs(A[l]), abs(A[r])
		if left > right:
			answer[r - l] = left * left
			l += 1
		else:
			answer[r - l] = right * right
			r -= 1
	return answer


Or:
(using deque)
def sortedSquares(self, A):
	answer = collections.deque()
	l, r = 0, len(A) - 1
	while l <= r:
		left, right = abs(A[l]), abs(A[r])
		if left > right:
			answer.appendleft(left * left)
			l += 1
		else:
			answer.appendleft(right * right)
			r -= 1
	return list(answer)
'''
