'''
107. Binary Tree Level Order Traversal II

Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]

Answer: Just store in BFS fashion, but reverse while returning output? - there are better ways 
'''

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def levelOrderBottom(self, root):
        if root==None:
            return []
        # Queue for BFS
        queue = []
        res_ = [] # for storing results
        queue.append(root)
        while queue:
            x = len(queue)
            res = []
            for i in range(x):
                y = queue.pop(0)
                res.append(y.val)
                if y.left!=None:
                    queue.append(y.left)
                if y.right!=None:
                    queue.append(y.right)
            res_.append(res)
        return res_[::-1]
