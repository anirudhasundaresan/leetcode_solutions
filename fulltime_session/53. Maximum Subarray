'''
53. Maximum Subarray

Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

Answer: Array, DP, Kadane's algorithm (using max subarray at previous index and current index)
'''

import math
class Solution:
    def maxSubArray(self, nums):
        fp = 0
        lp = 0
        _sum = nums[0]
        check = _sum
        for ind, num in enumerate(nums[1:]):
            if _sum+num < num:
                fp = ind + 1
                lp = ind + 1
                _sum = num
            else:
                if _sum > _sum+num:
                    lp = ind
                else:
                    lp = ind + 1
                _sum += num
            check = max(_sum, check)
        return check

        """
        :type nums: List[int]
        :rtype: int
        """

''' Much simpler approach; :/ why did I not think of this!?
# Idea is to keep changing the nums array accordingly
for i in range(1, len(nums)):
        if nums[i-1] > 0:
            nums[i] += nums[i-1]
    return max(nums)

'''

'''
Kadane's algorithm:

def kadane(A):
max_current = max_global = A[0]
for i in range(1, len(A)):
    max_current = max(A[i], A[i] + max_current)
    if max_current > max_global:
        max_global = max_current
return max_global
'''
