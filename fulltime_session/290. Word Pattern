'''
290. Word Pattern

Given a pattern and a string str, find if str follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.

Example 1:

Input: pattern = "abba", str = "dog cat cat dog"
Output: true
Example 2:

Input:pattern = "abba", str = "dog cat cat fish"
Output: false
Example 3:

Input: pattern = "aaaa", str = "dog cat cat dog"
Output: false
Example 4:

Input: pattern = "abba", str = "dog dog dog dog"
Output: false
Notes:
You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.

Answer: Dictionary
'''

from collections import defaultdict
class Solution:
    def wordPattern(self, pattern, str):
        s = str.split()
        if len(pattern) != len(s):
            return False
        dic = {}
        for ind, pat in enumerate(pattern):
            if pat not in dic:
                if s[ind] not in dic.values():
                    dic[pat] = s[ind]
                else:
                    return False
            else:
                if dic[pat] != s[ind]:
                    return False
        return True

        """
        :type pattern: str
        :type str: str
        :rtype: bool
        """

'''
Better answers based on assigning a value to each word/patters:

This problem is pretty much equivalent to Isomorphic Strings. Let me reuse two old solutions.

From here:
def wordPattern(self, pattern, str):
    s = pattern
    t = str.split()
    return map(s.find, s) == map(t.index, t)

Improved version also from there:
def wordPattern(self, pattern, str):
    f = lambda s: map({}.setdefault, s, range(len(s)))
    return f(pattern) == f(str.split())

From here:
def wordPattern(self, pattern, str):
    s = pattern
    t = str.split()
    return len(set(zip(s, t))) == len(set(s)) == len(set(t)) and len(s) == len(t)

'''
