'''
328. Odd Even Linked List

Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.

You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.

Example 1:

Input: 1->2->3->4->5->NULL
Output: 1->3->5->2->4->NULL
Example 2:

Input: 2->1->3->5->6->4->7->NULL
Output: 2->3->6->7->1->5->4->NULL
Note:

The relative order inside both the even and odd groups should remain as it was in the input.
The first node is considered odd, the second node even and so on ...

Answer: Two pointers; LinkedList
'''

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def oddEvenList(self, head):
        if head==None or head.next==None:
            return head
        odd = head
        even = head.next
        ev_ref = even
        od_ref = head
        if even.next==None:
            return head
        while True:
            odd.next = even.next
            odd = odd.next
            even.next = odd.next
            even = even.next
            if even==None:
                odd.next = ev_ref
                return od_ref
            if even.next==None:
                odd.next = ev_ref
                even.next = None
                return od_ref

        return head
        """
        :type head: ListNode
        :rtype: ListNode
        """
        
