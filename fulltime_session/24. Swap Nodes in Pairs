'''
24. Swap Nodes in Pairs

Given a linked list, swap every two adjacent nodes and return its head.

You may not modify the values in the list's nodes, only nodes itself may be changed.

Example:

Given 1->2->3->4, you should return the list as 2->1->4->3.

Answer: Logic, be careful with edge cases and odd/ even number of nodes
'''

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def swapPairs(self, head):
        curr = head
        if head==None or head.next==None:
            return head
        nxt = curr.next
        head = nxt
        prev = ListNode(0)
        while True:
            curr.next = nxt.next
            nxt.next = curr
            prev.next = nxt
            prev = curr
            curr = curr.next
            if curr==None:
                return head
            nxt = curr.next
            if nxt==None:
                return head
        """
        :type head: ListNode
        :rtype: ListNode
        """

''' # not my solution
# Recursively
def swapPairs(self, head):
    if head and head.next:
        tmp = head.next
        head.next = self.swapPairs(tmp.next)
        tmp.next = head
        return tmp
    return head
'''
