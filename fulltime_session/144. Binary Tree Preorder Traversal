'''
144. Binary Tree Preorder Traversal

Given a binary tree, return the preorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,2,3]
Follow up: Recursive solution is trivial, could you do it iteratively?
'''

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def preorderTraversal(self, root):
        ls = []
        stack = []
        while stack or root:
            if root:
                stack.append(root)
                ls.append(root.val)
                root = root.left
            else:
                cur = stack.pop()
                root = cur.right
        return ls
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        

''' Recursive
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def preorderTraversal(self, root):
        if root == None:
            return []
        ls = []
        ls.append(root.val)
        ls.extend(self.preorderTraversal(root.left))
        ls.extend(self.preorderTraversal(root.right))
        return ls
        """
        :type root: TreeNode
        :rtype: List[int]
        """
'''
