'''
973. K Closest Points to Origin

We have a list of points on the plane.  Find the K closest points to the origin (0, 0).

(Here, the distance between two points on a plane is the Euclidean distance.)

You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)

Example 1:

Input: points = [[1,3],[-2,2]], K = 1
Output: [[-2,2]]
Explanation:
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].
Example 2:

Input: points = [[3,3],[5,-1],[-2,4]], K = 2
Output: [[3,3],[-2,4]]
(The answer [[-2,4],[3,3]] would also be accepted.)

Note:

1 <= K <= points.length <= 10000
-10000 < points[i][0] < 10000
-10000 < points[i][1] < 10000

Answer: Sorting, PriorityQueue
'''

# https://pymotw.com/2/Queue/
# Earlier solution was to just use lists but TC is O(nlogn)
# Now, TC is O(n) + O(klogn)

import queue

class Solution:
    def kClosest(self, points, K):
        if K==len(points):
            return points
        dic = {tuple(point):(point[0]**2 + point[1]**2) for point in points} # O(n)
        # ls = sorted(tuple(dic.keys()), key=lambda x: dic[x]) # O(nlogn)
        # print(dic)
        # return ls[:K] #O(n) for splicing
        q = queue.PriorityQueue()
        for key, value in dic.items():
            #print(key)
            q.put((-value, key)) # since we need the smallest
            if q.qsize() > K: # we can limit the size of queue to K elements with this
                q.get()
        res = []
        while K>0:
            res.append(q.get()[1])
            K -= 1
        return res


        """
        :type points: List[List[int]]
        :type K: int
        :rtype: List[List[int]]
        """
