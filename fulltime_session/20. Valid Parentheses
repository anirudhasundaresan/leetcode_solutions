'''
20. Valid Parentheses

Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.

Example 1:

Input: "()"
Output: true
Example 2:

Input: "()[]{}"
Output: true
Example 3:

Input: "(]"
Output: false
Example 4:

Input: "([)]"
Output: false
Example 5:

Input: "{[]}"
Output: true

Answer: Stack

'''
class Solution:
    def isValid(self, s):
        stack = []
        dic = {')':'(', '}':'{', ']':'['}
        for _s in s:
            if _s in '({[':
                stack.append(_s)
            elif _s in ')}]':
                if len(stack) != 0:
                    if stack.pop() != dic[_s]:
                        return False
                else:
                    return False
        if len(stack)==0:
            return True
        else:
            return False

        """
        :type s: str
        :rtype: bool
        """

'''
# Another approach: think smart like this

class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        n = len(s)
        if n == 0:
            return True

        if n % 2 != 0:
            return False

        while '()' in s or '{}' in s or '[]' in s:
            s = s.replace('{}','').replace('()','').replace('[]','')

        if s == '':
            return True
        else:
            return False
'''
