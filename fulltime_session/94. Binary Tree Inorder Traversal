'''
94. Binary Tree Inorder Traversal

Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]
Follow up: Recursive solution is trivial, could you do it iteratively?

Answer: Iteratively try
'''

# iterative solution is by using stack
def inorderTraversal(self, root):
    ans = []
    stack = []

    while stack or root:
        if root:
            stack.append(root)
            root = root.left
        else:
            tmpNode = stack.pop()
            ans.append(tmpNode.val)
            root = tmpNode.right

    return ans


''' Recursive solution
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def inorderTraversal(self, root):
        # inorder - left, root, right
        if root == None:
            return []
        ls = []
        ls.extend(self.inorderTraversal(root.left))
        ls.append(root.val)
        ls.extend(self.inorderTraversal(root.right))
        return ls
        """
        :type root: TreeNode
        :rtype: List[int]
        """
'''
