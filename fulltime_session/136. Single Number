'''
136. Single Number

Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,1]
Output: 1
Example 2:

Input: [4,1,2,1,2]
Output: 4

Answer: Counter. XOR

'''
from collections import Counter
class Solution:
    def singleNumber(self, nums):
        return Counter(nums).most_common()[-1][0]
        """
        :type nums: List[int]
        :rtype: int
        """

'''
XOR solution:

class Solution:
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        prev = nums[0]
        for number in nums[1:]:
            prev = prev ^ number
        return prev


>>> 2^2
0
>>> 2^3
1
>>> 2^4
6
>>> 2^5
7
>>> 2^10
8
>>> 2^10^10
2
>>> 2^10^10^2
0
>>> 2^10^10^2^3
3
>>> 2^10^10^2^3^5^4^3^4

use this principle of XOR also.
'''
