'''
2. Add Two Numbers

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

Answer: LinkedLists; be careful of edge cases
'''

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):

        prev = ListNode(0)
        head = prev
        carry = 0
        while l1 and l2:
            sum_ = l1.val + l2.val + carry
            carry = sum_//10
            sum_ = sum_ % 10
            x = ListNode(sum_)
            prev.next = x
            prev = x
            l1 = l1.next
            l2 = l2.next

        if l1==None and l2==None:
            if carry==1:
                prev.next = ListNode(1)
            return head.next

        if l1==None:
            x = l2
        else:
            x = l1

        prev.next = x
        while carry:
            if not x:
                prev.next = ListNode(1)
                break
            sum_ = x.val + 1
            carry = sum_//10
            sum_ = sum_ % 10
            x.val = sum_
            x = x.next
            prev = prev.next

        return head.next

        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
