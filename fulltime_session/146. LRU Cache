'''
146. LRU Cache

Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4

Answer: You could use OrderedDicts in Python; question was designed for you to use dicts and doubly linkedlists; I used deque + dicts - no efficient, but test cases passed
# In this solution, we constantly need to move elements around in this data structure, so to optimize for time complexity we use a doubly linked list.
'''


from collections import deque
from collections import defaultdict

class LRUCache(object):
    # I will try solving this with a combo of queue and dict

    def __init__(self, capacity):
        """
        :type capacity: int
        """
        self.q = deque()
        self.d = defaultdict(int)
        self.cap = capacity

    def get(self, key):
        if key in self.d:
            self.q.remove(key)
            self.q.append(key)
            return self.d[key]
        else:
            return -1
        """
        :type key: int
        :rtype: int
        """

    def put(self, key, value):
        if key in self.d:
            self.d[key] = value
            self.q.remove(key)
        elif len(self.q) >= self.cap:
            del self.d[self.q.popleft()]
            self.d[key] = value
        else:
            self.d[key] = value
        self.q.append(key)
        """
        :type key: int
        :type value: int
        :rtype: void
        """

# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)

''' Better solution

from collections import OrderedDict
class LRUCache(object):

    def __init__(self, capacity):
        """
        :type capacity: int
        """
        self.cache = OrderedDict()
        self.cap = capacity



    def get(self, key):
        # print(self.cache)
        if key in self.cache:
            self.cache.move_to_end(key)
            return self.cache[key]
        else:
            return -1

        """
        :type key: int
        :rtype: int
        """


    def put(self, key, value):
        if key in self.cache:
            self.cache.move_to_end(key)
        elif len(self.cache) == self.cap:
            self.cache.popitem(last=False)
        self.cache[key] = value
        """
        :type key: int
        :type value: int
        :rtype: void
        """



# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)

'''
# https://docs.python.org/3/library/collections.html#collections.OrderedDict
