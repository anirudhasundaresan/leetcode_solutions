'''
844. Backspace String Compare

Given two strings S and T, return if they are equal when both are typed into empty text editors. # means a backspace character.

Example 1:

Input: S = "ab#c", T = "ad#c"
Output: true
Explanation: Both S and T become "ac".
Example 2:

Input: S = "ab##", T = "c#d#"
Output: true
Explanation: Both S and T become "".
Example 3:

Input: S = "a##c", T = "#a#c"
Output: true
Explanation: Both S and T become "c".
Example 4:

Input: S = "a#c", T = "b"
Output: false
Explanation: S becomes "c" while T becomes "b".
Note:

1 <= S.length <= 200
1 <= T.length <= 200
S and T only contain lowercase letters and '#' characters.
Follow up:

Can you solve it in O(N) time and O(1) space?

Answer: O(N) time and O(N) space - using stack pop and append
        By using two pointers - O(N) time and O(1) space
'''

# Better solution:
from itertools import zip_longest
class Solution:
    def backspaceCompare(self, S, T):
        def F(s):
            skip = 0
            for s_ in s[::-1]:
                if s_=='#':
                    skip += 1
                elif skip:
                    skip -= 1
                else:
                    yield s_
        return all(s==t for s,t in zip_longest(F(S), F(T))) # if F(S) = 'wtb' and F(T) = 'wb' ; this would return True if you don't use zip_longest from itertools

        """
        :type S: str
        :type T: str
        :rtype: bool
        """


''' (My initial solution)
class Solution:
    def backspaceCompare(self, S, T):
        stack_S = []
        stack_T = []
        for t in S:
            if stack_S and t == '#':
                stack_S.pop()
            if t != '#':
                stack_S.append(t)
        for t in T:
            if stack_T and t == '#':
                stack_T.pop()
            if t != '#':
                stack_T.append(t)
        if stack_S == stack_T:
            return True
        return False
        """
        :type S: str
        :type T: str
        :rtype: bool
        """
'''
