'''
238. Product of Array Except Self

Given an array nums of n integers where n > 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Example:

Input:  [1,2,3,4]
Output: [24,12,8,6]
Note: Please solve it without division and in O(n).

Follow up:
Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)

Answer: Algorithm, keep a left product and right product for each index.
'''

from functools import reduce
from operator import mul

class Solution:
    def productExceptSelf(self, nums):

        def calc_prod(indd):
            nums_ = nums.copy()
            del nums_[indd]
            return reduce(mul, nums_)

        prod = reduce(mul, nums)
        return [int(prod/i) if i!=0 else calc_prod(ind) for ind, i in enumerate(nums)]
        """
        :type nums: List[int]
        :rtype: List[int]
        """

'''
Better solution: Find the left multiplications and the right multiplications and multiply them both, for each index. 

class Solution:
    def productExceptSelf(self, nums):
        product = [1 for i in range(len(nums))]

        mul = 1
        product[0] = 1
        for i in range(1, len(nums)):
            mul = mul*nums[i-1]
            product[i] = mul

        mul = 1
        for i in range(len(nums)-2, -1, -1):
            mul = mul*nums[i+1]
            product[i] = mul*product[i]

        return product

        """
        :type nums: List[int]
        :rtype: List[int]
        """

'''
