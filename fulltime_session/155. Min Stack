'''
155. Min Stack

Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
Example:
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.

Answer: Store min as part of your stack in a tuple object.
'''

class MinStack:

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.stack = []
        # we will store the element as well as min upto that point


    def push(self, x):
        curr_min = self.getMin()
        if curr_min == None or curr_min > x:
            curr_min = x
        self.stack.append((x, min(x, curr_min)))
        #print(self.stack)

        """
        :type x: int
        :rtype: void
        """


    def pop(self):
        self.stack.pop()
        """
        :rtype: void
        """


    def top(self):
        return self.stack[-1][0]
        """
        :rtype: int
        """


    def getMin(self):
        if len(self.stack) == 0:
            return None
        return self.stack[-1][1]
        """
        :rtype: int
        """

# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(x)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()


''' My solution: naive, since I am directly using min function
class MinStack:

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.stack = []


    def push(self, x):
        self.stack.append(x)
        """
        :type x: int
        :rtype: void
        """


    def pop(self):
        self.stack.pop()
        """
        :rtype: void
        """


    def top(self):
        return self.stack[-1]
        """
        :rtype: int
        """


    def getMin(self):
        return min(self.stack)
        """
        :rtype: int
        """



# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(x)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()
'''
