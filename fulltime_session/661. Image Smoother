'''
661. Image Smoother

Given a 2D integer matrix M representing the gray scale of an image, you need to design a smoother to make the gray scale of each cell becomes the average gray scale (rounding down) of all the 8 surrounding cells and itself. If a cell has less than 8 surrounding cells, then use as many as you can.

Example 1:
Input:
[[1,1,1],
 [1,0,1],
 [1,1,1]]
Output:
[[0, 0, 0],
 [0, 0, 0],
 [0, 0, 0]]
Explanation:
For the point (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0
For the point (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0
For the point (1,1): floor(8/9) = floor(0.88888889) = 0
Note:
The value in the given matrix is in the range of [0, 255].
The length and width of the given matrix are in the range of [1, 150].

Answer: Array
'''

# ans = [[0] * C for _ in M] - canbe sued instead of copy

# Time complexity is O(N) where N is the number of pixels as we are iterating through the pixel - the inner for loops always have constant time since they see only surrounding pixels. 
import copy
class Solution(object):
    def imageSmoother(self, M):
        X = copy.deepcopy(M)
        for i in range(len(M)):
            for j in range(len(M[0])):
                val = [M[x][y] for x in range(i-1, i+2) for y in range(j-1, j+2) if x>=0 and x<len(M) and y>=0 and y<len(M[0])]
                # print(val)
                X[i][j] = sum(val)//len(val)
        return X
        """
        :type M: List[List[int]]
        :rtype: List[List[int]]
        """
